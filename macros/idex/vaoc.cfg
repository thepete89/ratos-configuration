# WARNING: DO NOT EDIT THIS FILE
# To override settings from this file, you can copy and paste the relevant
# sections into your printer.cfg and change it there.

#####
# VAOC CONFIGURATION
#####
[gcode_macro _VAOC]
variable_is_fixed: False                       # True|False = vaoc is installed on a fix position
variable_is_started: False                     # internal use only. Do not touch!
variable_is_started_at_temp: False             # internal use only. Do not touch!
variable_additional_safe_distance: 50          # internal use only. Do not touch!
variable_safe_z: 60                            # float = safe z-height for xy travel moves
variable_auto_z_offset_calibration: True       # True|False = performs a auto z-offset calibration before the print starts if needed
variable_enable_camera_cooling: True           # True|False = enables the part cooling fan of the currently loaded toolhead
variable_camera_cooling_fan_speed: 0.3         # float = part cooling fan speed of the currently loaded toolhead
variable_camera_cooling_temperature: 50        # int = enables the integrated VAOC fan at the configured bed temperature 
variable_toolchange_travel_speed: 300          # int = xy travel move speeds
variable_toolchange_travel_accel: 5000         # int = xy travel move sccelerations
variable_cache_toolchange_travel_speed: 300    # internal use only. Do not touch!
variable_cache_toolchange_travel_accel: 5000   # internal use only. Do not touch!
variable_cache_toolchange_zhop: 1.0            # internal use only. Do not touch!
variable_t0_toolhead_sensor_enabled: 0         # internal use only. Do not touch!
variable_t1_toolhead_sensor_enabled: 0         # internal use only. Do not touch!
variable_t0_bowden_sensor_enabled: 0           # internal use only. Do not touch!
variable_t1_bowden_sensor_enabled: 0           # internal use only. Do not touch!
gcode:
	_ECHO_VAOC_VARS


#####
# VAOC COMMON
#####
[gcode_macro _VAOC_START]
description: Called from the front end. If T0_TEMP, T0_TEMP and BED_TEMP parameter are specified, VAOC calibration will start under real conditions at printing temp.
gcode:
	# parameters
	{% set t0_temp = params.T0_TEMP|default(0)|int %}
	{% set t1_temp = params.T1_TEMP|default(0)|int %}
	{% set bed_temp = params.BED_TEMP|default(0)|int %}

	# config
	{% set printable_y_max = printer["gcode_macro RatOS"].printable_y_max|float %}
	{% set printable_x_max = printer["gcode_macro RatOS"].printable_x_max|float %}

	# vaoc config
	{% set is_fixed = true if printer["gcode_macro _VAOC"].is_fixed|default(true)|lower == 'true' else false %}

	# vaoc calibration under real if needed parameters are specified
	{% if t0_temp > 0 and t1_temp > 0 and bed_temp > 0 %}

		# check if VAOC is fixed
		{% if not is_fixed %}
			_LED_START_PRINTING_ERROR
			{ action_raise_error("VAOC calibration at temp works only with a fixed installed VAOC device.") }
		{% endif %}

		# make sure filaments are not loaded
		{% if printer["filament_switch_sensor toolhead_filament_sensor_t0"] is defined %}
			{% if printer["filament_switch_sensor toolhead_filament_sensor_t0"].filament_detected|lower == "true" %}
				_LED_START_PRINTING_ERROR
				{ action_raise_error("Filament detected in toolhead T0. Unload filament and make sure to clean the nozzle and the melting zone.") }
			{% endif %}
		{% endif %}
		{% if printer["filament_switch_sensor toolhead_filament_sensor_t1"] is defined %}
			{% if printer["filament_switch_sensor toolhead_filament_sensor_t1"].filament_detected|lower == "true" %}
				_LED_START_PRINTING_ERROR
				{ action_raise_error("Filament detected in toolhead T1. Unload filament and make sure to clean the nozzle and the melting zone.") }
			{% endif %}
		{% endif %}

		# cache filament sensor states and disable filament sensors for the start print macro
		{% if printer["filament_switch_sensor toolhead_filament_sensor_t0"] is defined %}
			SET_GCODE_VARIABLE MACRO=_VAOC VARIABLE=t0_toolhead_sensor_enabled VALUE={1 if printer["filament_switch_sensor toolhead_filament_sensor_t0"].enabled|lower == "true" else 0}
			SET_FILAMENT_SENSOR SENSOR=toolhead_filament_sensor_t0 ENABLE=0
		{% endif %}
		{% if printer["filament_switch_sensor toolhead_filament_sensor_t1"] is defined %}
			SET_GCODE_VARIABLE MACRO=_VAOC VARIABLE=t1_toolhead_sensor_enabled VALUE={1 if printer["filament_switch_sensor toolhead_filament_sensor_t1"].enabled|lower == "true" else 0}
			SET_FILAMENT_SENSOR SENSOR=toolhead_filament_sensor_t1 ENABLE=0
		{% endif %}
		{% if printer["filament_switch_sensor bowden_filament_sensor_t0"] is defined %}
			SET_GCODE_VARIABLE MACRO=_VAOC VARIABLE=t0_bowden_sensor_enabled VALUE={1 if printer["filament_switch_sensor bowden_filament_sensor_t0"].enabled|lower == "true" else 0}
			SET_FILAMENT_SENSOR SENSOR=bowden_filament_sensor_t0 ENABLE=0
		{% endif %}
		{% if printer["filament_switch_sensor bowden_filament_sensor_t1"] is defined %}
			SET_GCODE_VARIABLE MACRO=_VAOC VARIABLE=t1_bowden_sensor_enabled VALUE={1 if printer["filament_switch_sensor bowden_filament_sensor_t1"].enabled|lower == "true" else 0}
			SET_FILAMENT_SENSOR SENSOR=bowden_filament_sensor_t1 ENABLE=0
		{% endif %}

		# run complete start print procedure
		START_PRINT EXTRUDER_TEMP={t0_temp},{t1_temp} EXTRUDER_OTHER_LAYER_TEMP={t0_temp},{t1_temp} BED_TEMP={bed_temp} INITIAL_TOOL=0 TOTAL_LAYER_COUNT=1 X0={(printable_x_max / 2 - 10)} Y0={(printable_y_max / 2 - 10)} X1={(printable_x_max / 2 + 10)} Y1={(printable_y_max / 2 + 10)} TOTAL_TOOLSHIFTS=1 FIRST_X={printable_x_max / 2} FIRST_Y={printable_y_max / 2} MIN_X={(printable_x_max / 2 - 10)} MAX_X={(printable_x_max / 2 + 10)} USED_TOOLS=0,1 WIPE_ACCEL=15000

		# set is_printing_gcode state
		SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=is_printing_gcode VALUE=False

		# set VAOC state
		SET_GCODE_VARIABLE MACRO=_VAOC VARIABLE=is_started_at_temp VALUE=True

	{% endif %}

	# start VAOC
	_START_VAOC


[gcode_macro _START_VAOC]
gcode:
	# parameters
	{% set auto_z_offset = true if params.AUTO_Z_OFFSET|default(false)|lower == 'true' else false %}

	# vaoc config
	{% set is_fixed = true if printer["gcode_macro _VAOC"].is_fixed|default(true)|lower == 'true' else false %}
	{% set safe_z = printer["gcode_macro _VAOC"].safe_z|float %}
	{% set additional_safe_distance = printer["gcode_macro _VAOC"].additional_safe_distance|float %}
	{% set z_offset_probe_x_offset = printer["z_offset_probe"].x_offset|default(0)|float %}
	{% set z_offset_probe_y_offset = printer["z_offset_probe"].y_offset|default(0)|float %}
	{% set expected_camera_x_position = printer["gcode_macro _VAOC"].expected_camera_x_position|default(0)|float %}
	{% set expected_camera_y_position = printer["gcode_macro _VAOC"].expected_camera_y_position|default(0)|float %}

	# config
	{% set speed = printer["gcode_macro RatOS"].toolchange_travel_speed * 60 %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set safe_distance = printer.configfile.settings.dual_carriage.safe_distance|float %}
	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}
	{% set printable_y_max = printer["gcode_macro RatOS"].printable_y_max|float %}
	{% set printable_x_max = printer["gcode_macro RatOS"].printable_x_max|float %}

	# ratos variables file
	{% set svv = printer.save_variables.variables %}

	# get reference point coordinates
	{% set idex_xcontrolpoint = svv.idex_xcontrolpoint|default(printable_x_max/2)|float %}
	{% set idex_ycontrolpoint = svv.idex_ycontrolpoint|default(printable_y_max/2)|float %}
	{% set idex_zcontrolpoint = svv.idex_zcontrolpoint|default(50)|float %}
	{% set idex_zoffsetcontrolpoint = svv.idex_zoffsetcontrolpoint|default(0)|float %}

	# echo
	DEBUG_ECHO PREFIX="VAOC_START" MSG={'"xcontrolpoint %.6f, ycontrolpoint %.6f, zcontrolpoint %.6f, zoffsetcontrolpoint %.6f, expected_camera_x_position %.6f, expected_camera_y_position %.6f"' % (idex_xcontrolpoint, idex_ycontrolpoint, idex_zcontrolpoint, idex_zoffsetcontrolpoint, expected_camera_x_position, expected_camera_y_position)}

	# vaoc sanity check
	{% if is_fixed %}
		{% if (idex_xcontrolpoint - expected_camera_x_position)|abs > 5 %}
			{ action_raise_error("Unexpected VAOC x-control point detected! Please run '_VAOC_RESET' to roll back to default values.") }
		{% endif %}
		{% if (idex_ycontrolpoint - expected_camera_y_position)|abs > 5 %}
			{ action_raise_error("Unexpected VAOC y-control point detected! Please run '_VAOC_RESET' to roll back to default values.") }
		{% endif %}
	{% endif %}
	{% if safe_z < idex_zcontrolpoint + 2 or safe_z < idex_zoffsetcontrolpoint + 2 %}
		{action_raise_error("VAOC safe_z value too low!")}
	{% endif %}

	# cache toolchange config
	SET_GCODE_VARIABLE MACRO=_VAOC VARIABLE=cache_toolchange_travel_speed VALUE={printer["gcode_macro RatOS"].toolchange_travel_speed|int}
	SET_GCODE_VARIABLE MACRO=_VAOC VARIABLE=cache_toolchange_travel_accel VALUE={printer["gcode_macro RatOS"].toolchange_travel_accel|int}
	SET_GCODE_VARIABLE MACRO=_VAOC VARIABLE=cache_toolchange_zhop VALUE={printer["gcode_macro RatOS"].toolchange_zhop|float}

	# set toolchange config
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=toolchange_travel_speed VALUE={printer["gcode_macro _VAOC"].toolchange_travel_speed|int}
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=toolchange_travel_accel VALUE={printer["gcode_macro _VAOC"].toolchange_travel_accel|int}
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=toolchange_zhop VALUE=0

	# auto z-offset values
	{% if auto_z_offset %}
		{% set additional_safe_distance = 20 %}
		{% set idex_xcontrolpoint = idex_xcontrolpoint + z_offset_probe_x_offset %}
		{% set idex_ycontrolpoint = idex_ycontrolpoint + z_offset_probe_y_offset %}
	{% endif %}

	# get parking position
	{% set parking_position_t0 = printer["gcode_macro T0"].parking_position|float %}
	{% set parking_position_t1 = printer["gcode_macro T1"].parking_position|float %}
	{% if is_fixed %}
		{% set parking_position_t0 = idex_xcontrolpoint - safe_distance - additional_safe_distance %}
		{% set parking_position_t1 = idex_xcontrolpoint + safe_distance + additional_safe_distance %}
	{% endif %}

	M118 10

	# echo
	RATOS_ECHO PREFIX="VAOC" MSG={'"START X_REFERENCE:%.6f Y_REFERENCE:%.6f Z_REFERENCE:%.6f PARK_T0:%.6f PARK_T1:%.6f"' % (idex_xcontrolpoint, idex_ycontrolpoint, idex_zcontrolpoint, parking_position_t0, parking_position_t1)}

	# turn VAOC LED on
	_LED_VAOC_ON

	# Home if needed
	MAYBE_HOME
	M400
	
	# move to safe z if needed
	{% if printer.toolhead.position.z|float < safe_z %}
		G1 Z{safe_z} F{z_speed}
	{% endif %}

	# move to safe y if needed
	{% if printer.toolhead.position.y|float > printable_y_max %}
		G1 Y{printable_y_max} F{speed}
	{% endif %}

	# set IDEX single mode if needed
	{% set idex_mode = printer["dual_carriage"].carriage_1|lower %}
	{% if idex_mode == "copy" or idex_mode == "mirror" %}
		IDEX_SINGLE
	{% endif %}

	# bring toolheads into position
	{% if is_fixed %}
		_SELECT_TOOL T=0 TOOLSHIFT=false
		{% if default_toolhead == 0 %}
			G1 X{idex_xcontrolpoint} F{speed}
			SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
			G1 X{idex_xcontrolpoint + safe_distance + additional_safe_distance} F{speed}
		{% else %}
			G1 X{idex_xcontrolpoint - safe_distance - additional_safe_distance} F{speed}
			SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
			G1 X{idex_xcontrolpoint} F{speed}
		{% endif %}
		SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
	{% else %}
		_SELECT_TOOL T={default_toolhead} TOOLSHIFT=false
	{% endif %}

	# move to control point
	G1 X{idex_xcontrolpoint} F{speed}
	G1 Y{idex_ycontrolpoint} F{speed}
	G1 Z{idex_zcontrolpoint} F{z_speed}

	# select toolhead
	_SELECT_TOOL T={default_toolhead} X={idex_xcontrolpoint} Y={idex_ycontrolpoint} PARK_T0={parking_position_t0} PARK_T1={parking_position_t1}

	# set part cooling fans
	_VAOC_SET_CAMERA_COOLING T={default_toolhead} AUTO_Z_OFFSET={auto_z_offset}

	# set VAOC state
	SET_GCODE_VARIABLE MACRO=_VAOC VARIABLE=is_started VALUE=True


[gcode_macro _VAOC_END]
gcode:
	# vaoc config
	{% set safe_z = printer["gcode_macro _VAOC"].safe_z|float %}

	# config
	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}
	{% set printable_y_max = printer["gcode_macro RatOS"].printable_y_max|float %}
	{% set center_y = printable_y_max / 2 %}

	# get parking position
	{% set parking_position_t0 = printer["gcode_macro T0"].parking_position|float %}
	{% set parking_position_t1 = printer["gcode_macro T1"].parking_position|float %}

	# disable camera cooling
	SET_FAN_SPEED FAN=part_fan_t0 SPEED=0
	SET_FAN_SPEED FAN=part_fan_t1 SPEED=0
	# Update core Klipper's fan speed to the fan speed of the active toolhead
	# Only do this if you have a sacrificial [fan] section
	M106.1 S0

	# move to safe z before going back to the printable area
	{% if printer.toolhead.position.z|float < safe_z %}
		G1 Z{safe_z} F{z_speed}
	{% endif %}

	# move to center y 
	G1 Y{center_y} F{speed}

	# park secondary toolhead and reactivate IDEX single mode
	_IDEX_SINGLE INIT=1

	# turn camera LED off
	_LED_VAOC_OFF

	# reset toolchange config
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=toolchange_travel_speed VALUE={printer["gcode_macro _VAOC"].cache_toolchange_travel_speed|int}
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=toolchange_travel_accel VALUE={printer["gcode_macro _VAOC"].cache_toolchange_travel_accel|int}
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=toolchange_zhop VALUE={printer["gcode_macro _VAOC"].cache_toolchange_zhop|float}

	# restore filament sensor states if needed
	{% if printer["gcode_macro _VAOC"].is_started_at_temp|default(true)|lower == 'true' %}
		{% if printer["filament_switch_sensor toolhead_filament_sensor_t0"] is defined %}
			SET_FILAMENT_SENSOR SENSOR=toolhead_filament_sensor_t0 ENABLE={printer["gcode_macro _VAOC"].t0_toolhead_sensor_enabled|int}
		{% endif %}
		{% if printer["filament_switch_sensor toolhead_filament_sensor_t1"] is defined %}
			SET_FILAMENT_SENSOR SENSOR=toolhead_filament_sensor_t1 ENABLE={printer["gcode_macro _VAOC"].t1_toolhead_sensor_enabled|int}
		{% endif %}
		{% if printer["filament_switch_sensor bowden_filament_sensor_t0"] is defined %}
			SET_FILAMENT_SENSOR SENSOR=bowden_filament_sensor_t0 ENABLE={printer["gcode_macro _VAOC"].t0_bowden_sensor_enabled|int}
		{% endif %}
		{% if printer["filament_switch_sensor bowden_filament_sensor_t1"] is defined %}
			SET_FILAMENT_SENSOR SENSOR=bowden_filament_sensor_t1 ENABLE={printer["gcode_macro _VAOC"].t1_bowden_sensor_enabled|int}
		{% endif %}
	{% endif %}

	# reset VAOC state
	SET_GCODE_VARIABLE MACRO=_VAOC VARIABLE=is_started VALUE=False
	SET_GCODE_VARIABLE MACRO=_VAOC VARIABLE=is_started_at_temp VALUE=False


[gcode_macro _VAOC_LOAD_TOOL]
gcode:
	# parameters
	{% set t = params.T|default(0)|int %}
	{% set auto_z_offset = true if params.AUTO_Z_OFFSET|default(false)|lower == 'true' else false %}

	# config
	{% set speed = printer["gcode_macro RatOS"].toolchange_travel_speed * 60 %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set safe_distance = printer.configfile.settings.dual_carriage.safe_distance|float %}
	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}
	{% set printable_y_max = printer["gcode_macro RatOS"].printable_y_max|float %}

	# vaoc config
	{% set is_fixed = true if printer["gcode_macro _VAOC"].is_fixed|default(true)|lower == 'true' else false %}
	{% set safe_z = printer["gcode_macro _VAOC"].safe_z|float %}
	{% set additional_safe_distance = printer["gcode_macro _VAOC"].additional_safe_distance|float %}
	{% set z_offset_probe_x_offset = printer["z_offset_probe"].x_offset|default(0)|float %}
	{% set z_offset_probe_y_offset = printer["z_offset_probe"].y_offset|default(0)|float %}

	# ratos variables file
	{% set svv = printer.save_variables.variables %}

	# get reference point coordinates
	{% set idex_xcontrolpoint = svv.idex_xcontrolpoint|default(150)|float %}
	{% set idex_ycontrolpoint = svv.idex_ycontrolpoint|default(30)|float %}
	{% set idex_zcontrolpoint = svv.idex_zcontrolpoint|default(50)|float %}
	{% set idex_zoffsetcontrolpoint = svv.idex_zoffsetcontrolpoint|default(0)|float %}

	# auto z-offset values
	{% if auto_z_offset %}
		{% set additional_safe_distance = 20 %}
		{% set idex_xcontrolpoint = idex_xcontrolpoint + z_offset_probe_x_offset %}
		{% set idex_ycontrolpoint = idex_ycontrolpoint + z_offset_probe_y_offset %}
	{% endif %}

	# echo
	RATOS_ECHO PREFIX="VAOC" MSG={'"Move T%s to control point: X%.6f Y%.6f Z%.6f IS_FIXED=%s"' % (t, idex_xcontrolpoint, idex_ycontrolpoint, idex_zcontrolpoint, is_fixed)}

	# set part cooling fans
	_VAOC_SET_CAMERA_COOLING T={t} AUTO_Z_OFFSET={auto_z_offset}

	# get parking positions
	{% set parking_position_t0 = printer["gcode_macro T0"].parking_position|float %}
	{% set parking_position_t1 = printer["gcode_macro T1"].parking_position|float %}
	{% if is_fixed %}
		{% set parking_position_t0 = idex_xcontrolpoint - safe_distance - additional_safe_distance %}
		{% set parking_position_t1 = idex_xcontrolpoint + safe_distance + additional_safe_distance %}
	{% endif %}

	# z-hop if needed
	{% if idex_zcontrolpoint < idex_zoffsetcontrolpoint + 2 or idex_zoffsetcontrolpoint == 0 %}
		G1 Z{safe_z} F{z_speed}
	{% else %}
		G1 Z{idex_zcontrolpoint} F{z_speed}
	{% endif %}

	# select toolhead
	_SELECT_TOOL T={t} X={idex_xcontrolpoint} Y={idex_ycontrolpoint} PARK_T0={parking_position_t0} PARK_T1={parking_position_t1}

	# z-drop if needed
	{% if idex_zcontrolpoint < idex_zoffsetcontrolpoint + 2 or idex_zoffsetcontrolpoint == 0 %}
		G1 Z{idex_zcontrolpoint} F{z_speed}
	{% endif %}


[gcode_macro _VAOC_SET_CAMERA_COOLING]
gcode:
	# parameters
	{% set t = params.T|default(0)|int %}
	{% set auto_z_offset = true if params.AUTO_Z_OFFSET|default(false)|lower == 'true' else false %}

	# vaoc config
	{% set enable_camera_cooling = true if printer["gcode_macro _VAOC"].enable_camera_cooling|default(true)|lower == 'true' else false %}
	{% set camera_cooling_temperature = printer["gcode_macro _VAOC"].camera_cooling_temperature|float %}
	{% set camera_cooling_fan_speed = printer["gcode_macro _VAOC"].camera_cooling_fan_speed|float %}

	# set part cooling fans
	{% if not auto_z_offset %}
		{% if printer.heater_bed.temperature >= camera_cooling_temperature and enable_camera_cooling %}
			SET_FAN_SPEED FAN=part_fan_t0 SPEED={camera_cooling_fan_speed if t == 0 else 0}
			SET_FAN_SPEED FAN=part_fan_t1 SPEED={camera_cooling_fan_speed if t == 1 else 0}
			# Update core Klipper's fan speed to the fan speed of the active toolhead
			# Only do this if you have a sacrificial [fan] section
			M106.1 S{camera_cooling_fan_speed}

		{% else %}
			SET_FAN_SPEED FAN=part_fan_t0 SPEED=0
			SET_FAN_SPEED FAN=part_fan_t1 SPEED=0
			# Update core Klipper's fan speed to the fan speed of the active toolhead
			# Only do this if you have a sacrificial [fan] section
			M106.1 S0

		{% endif %}
	{% endif %}


[gcode_macro _VAOC_SET_TOOL]
gcode:
	# ratos variables file
	{% set svv = printer.save_variables.variables %}

	# get IDEX mode
	{% set idex_mode = printer["dual_carriage"].carriage_1|lower %}
	{% set toolhead = 1 if idex_mode=='primary' else 0 %}
	
	# config
	{% set speed = printer["gcode_macro RatOS"].toolchange_travel_speed * 60 %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}

	{% if toolhead == printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}
		# set control point for primary toolhead

		# get current toolhead position
		{% set x = printer.toolhead.position.x|float %}
		{% set y = printer.toolhead.position.y|float %}
		{% set z = printer.toolhead.position.z|float %}

		# save current toolhead position 
		SAVE_VARIABLE VARIABLE=idex_xcontrolpoint VALUE={x}
		SAVE_VARIABLE VARIABLE=idex_ycontrolpoint VALUE={y}
		SAVE_VARIABLE VARIABLE=idex_zcontrolpoint VALUE={z}

		# echo 
		RATOS_ECHO PREFIX="VAOC" MSG={'"Control point was set: X%.6f Y%.6f Z%.6f"' % (x, y, z)}

	{% else %}
		# set toolhead offset for secondary toolhead

		# get move distance  
		{% set move_diff_x = printer.gcode_move.gcode_position.x|float - svv.idex_xcontrolpoint|float %}
		{% set move_diff_y = printer.gcode_move.gcode_position.y|float - svv.idex_ycontrolpoint|float %}
		{% set move_diff_z = printer.gcode_move.gcode_position.z|float - svv.idex_zcontrolpoint|float %}

		# offset correction 
		SET_GCODE_OFFSET X_ADJUST={move_diff_x} Y_ADJUST={move_diff_y} Z_ADJUST={move_diff_z} MOVE=0

		# get new toolhead offset 
		{% set new_x_offset = svv.idex_xoffset - move_diff_x %}
		{% set new_y_offset = svv.idex_yoffset - move_diff_y %}
		{% set new_z_offset = svv.idex_zoffset - move_diff_z %}

		# save new toolhead offsets 
		SAVE_VARIABLE VARIABLE=idex_xoffset VALUE={new_x_offset}
		SAVE_VARIABLE VARIABLE=idex_yoffset VALUE={new_y_offset}
		SAVE_VARIABLE VARIABLE=idex_zoffset VALUE={new_z_offset}

		# echo 
		RATOS_ECHO PREFIX="VAOC" MSG={'"T%s offset was set: X%.6f Y%.6f Z%.6f"' % (toolhead, new_x_offset, new_y_offset, new_z_offset)}

	{% endif %}


[gcode_macro _VAOC_MOVE]
gcode:
	# parameters
	{% set x = params.X|default(0)|float %}
	{% set y = params.Y|default(0)|float %}
	{% set z = params.Z|default(0)|float %}

	# Move toolhead
	G91                     # Relative positioning
	{% if z != 0 %}
		RATOS_ECHO PREFIX="VAOC" MSG={'"Move toolhead: G1 Z%.6f F300"' % (z)}
		G1 Z{z} F300

	{% else %}
		{% if x <=2 and y <=2 %}
			RATOS_ECHO PREFIX="VAOC" MSG={'"Move toolhead: G1 X%.6f Y%.6f F18000"' % (x, y)}
			G1 X{x} Y{y} F18000			
		{% endif %}
	{% endif %}
	G90                     # Absolute positioning

#####
# VAOC Z OFFSET CALIBRATION
#####
[gcode_macro _VAOC_CALIBRATE_Z_OFFSET]
gcode:
	# parameters
	{% set auto_z_offset = true if params.AUTO_Z_OFFSET|default(false)|lower == 'true' else false %}

	# vaoc config
	{% set is_fixed = true if printer["gcode_macro _VAOC"].is_fixed|default(true)|lower == 'true' else false %}

	{% if printer["z_offset_probe"] is defined and is_fixed %}

		# config
		{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
		{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}

		# vaoc config
		{% set expected_camera_x_position = printer["gcode_macro _VAOC"].expected_camera_x_position|default(0)|float %}
		{% set expected_camera_y_position = printer["gcode_macro _VAOC"].expected_camera_y_position|default(0)|float %}

		# ratos variables file
		{% set svv = printer.save_variables.variables %}

		# get reference point coordinates
		{% set idex_xcontrolpoint = svv.idex_xcontrolpoint|default(0)|float %}
		{% set idex_ycontrolpoint = svv.idex_ycontrolpoint|default(0)|float %}
		{% set idex_zcontrolpoint = svv.idex_zcontrolpoint|default(50)|float %}
		{% set idex_zoffsetcontrolpoint = svv.idex_zoffsetcontrolpoint|default(0)|float %}

		# echo
		DEBUG_ECHO PREFIX="_VAOC_CALIBRATE_Z_OFFSET" MSG={'"xcontrolpoint %.6f, ycontrolpoint %.6f, zcontrolpoint %.6f, zoffsetcontrolpoint %.6f, expected_camera_x_position %.6f, expected_camera_y_position %.6f"' % (idex_xcontrolpoint, idex_ycontrolpoint, idex_zcontrolpoint, idex_zoffsetcontrolpoint, expected_camera_x_position, expected_camera_y_position)}

		# vaoc sanity check
		{% if (idex_xcontrolpoint - expected_camera_x_position)|abs > 5 %}
			{ action_raise_error("Unexpected VAOC x-control point detected! Please run '_VAOC_RESET' to roll back to default values.") }
		{% endif %}
		{% if (idex_ycontrolpoint - expected_camera_y_position)|abs > 5 %}
			{ action_raise_error("Unexpected VAOC y-control point detected! Please run '_VAOC_RESET' to roll back to default values.") }
		{% endif %}

		# automated toolhead z-offset calibration
		{% set act_z = printer.toolhead.position.z|float %}

		{% if auto_z_offset %}
			_START_VAOC AUTO_Z_OFFSET=True
			_VAOC_PROBE_Z_OFFSET AUTO_Z_OFFSET=True
			_VAOC_LOAD_TOOL T={0 if default_toolhead == 1 else 1} AUTO_Z_OFFSET=True
			_VAOC_PROBE_Z_OFFSET AUTO_Z_OFFSET=True
			_VAOC_END 
		{% else %}
			_VAOC_LOAD_TOOL T={default_toolhead}
			_VAOC_PROBE_Z_OFFSET
			_VAOC_LOAD_TOOL T={0 if default_toolhead == 1 else 1}
			_VAOC_PROBE_Z_OFFSET 
			_VAOC_LOAD_TOOL T={default_toolhead}
		{% endif %}

		G1 Z{act_z} F{z_speed}

		# echo results
		_VAOC_ECHO_Z_OFFSET

	{% endif %}


[gcode_macro _VAOC_PROBE_Z_OFFSET]
gcode:
	# parameters
	{% set auto_z_offset = true if params.AUTO_Z_OFFSET|default(false)|lower == 'true' else false %}

	# config
	{% set z_offset_probe_x_offset = printer["z_offset_probe"].x_offset|default(0)|float %}
	{% set z_offset_probe_y_offset = printer["z_offset_probe"].y_offset|default(0)|float %}
	{% set speed = printer["gcode_macro RatOS"].toolchange_travel_speed * 60 %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}

	# ratos variables file
	{% set svv = printer.save_variables.variables %}

	# get reference point coordinates
	{% set idex_xcontrolpoint = svv.idex_xcontrolpoint|default(150)|float %}
	{% set idex_ycontrolpoint = svv.idex_ycontrolpoint|default(30)|float %}
	{% set idex_zcontrolpoint = svv.idex_zcontrolpoint|default(50)|float %}

	# mave to control point
	G1 Z{idex_zcontrolpoint} F{z_speed}
	G1 X{idex_xcontrolpoint + z_offset_probe_x_offset} Y{idex_ycontrolpoint + z_offset_probe_y_offset} F{speed}

	# probe z-offset
	_VAOC_Z_OFFSET_PROBE_CURRENT_POSITION
	G0 Z{idex_zcontrolpoint} F{z_speed}
	{% if not auto_z_offset %}
		G1 X{idex_xcontrolpoint} Y{idex_ycontrolpoint} F{speed}
	{% endif %}
	_VAOC_Z_OFFSET_PROBE_SAVE_PROBE_RESULT 


[gcode_macro _VAOC_Z_OFFSET_PROBE_CURRENT_POSITION]
gcode:
	# Z_OFFSET_PROBE [PROBE_SPEED=<mm/s>] [LIFT_SPEED=<mm/s>] [SAMPLES=<count>] [SAMPLE_RETRACT_DIST=<mm>] [SAMPLES_TOLERANCE=<mm>] [SAMPLES_TOLERANCE_RETRIES=<count>] [SAMPLES_RESULT=median|average]
	Z_OFFSET_PROBE PROBE_SPEED=3 LIFT_SPEED=15 SAMPLES=5 SAMPLE_RETRACT_DIST=3 SAMPLES_TOLERANCE=0.005 SAMPLES_TOLERANCE_RETRIES=10 SAMPLES_RESULT=median


[gcode_macro _VAOC_Z_OFFSET_PROBE_SAVE_PROBE_RESULT]
gcode:
	{% if printer["z_offset_probe"] is defined %}

		# get IDEX mode
		{% set idex_mode = printer["dual_carriage"].carriage_1|lower %}
		{% set toolhead = 1 if idex_mode=='primary' else 0 %}

		# config
		{% set last_z = printer["z_offset_probe"].last_z_result|default(0)|float %}
		{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}

		# ratos variables file
		{% set svv = printer.save_variables.variables %}

		{% if toolhead == printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}
			# set control point

			# save new z-offset control point
			SAVE_VARIABLE VARIABLE=idex_zoffsetcontrolpoint VALUE={last_z}
			RATOS_ECHO PREFIX="VAOC" MSG={'"Z-offset control point set:: %.6f"' % last_z}

		{% else %}
			# set toolhead offset

			# get new toolhead z-offset
			{% set z = svv.idex_zoffsetcontrolpoint|float - last_z %}

			# revert original applied z-offset
			SET_GCODE_OFFSET Z_ADJUST={svv.idex_zoffset} MOVE=0

			# move to z-control point
			G0 Z{svv.idex_zcontrolpoint|float} F{z_speed}

			# apply new z-offset
			SET_GCODE_OFFSET Z_ADJUST={(0 - z)} MOVE=1

			# save new z-offset
			SAVE_VARIABLE VARIABLE=idex_zoffset VALUE={z}
			RATOS_ECHO PREFIX="VAOC" MSG={'"T%s offset set: Z %.6f"' % (t, z)}

		{% endif %}

	{% endif %}


[gcode_macro _VAOC_ECHO_Z_OFFSET]
gcode:
	# config
	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}

	# ratos variables file
	{% set svv = printer.save_variables.variables %}

	# echo
	RATOS_ECHO PREFIX="VAOC" MSG={'"T%s toolhead z-offset %.6f"' % (1 if default_toolhead == 0 else 0, svv.idex_zoffset)}
	{% if svv.idex_zoffset < 0.02 %}
		CONSOLE_ECHO TITLE={'"Perfect toolhead z-offset of %.6fmm!"' % svv.idex_zoffset} MSG="You have a perfect toolhead z-offset!" TYPE="result"
	{% elif svv.idex_zoffset >= 0.02 and svv.idex_zoffset < 0.05 %}
		CONSOLE_ECHO TITLE={'"Good toolhead z-offset of %.6fmm!"' % svv.idex_zoffset} MSG="Your toolhead z-offset is good!" TYPE="result"
	{% elif svv.idex_zoffset >= 0.05 and svv.idex_zoffset < 0.1 %}
		CONSOLE_ECHO TITLE={'"High toolhead z-offset of %.6fmm!"' % svv.idex_zoffset} MSG="Your toolhead z-offset could be better._N_Use minimum 0.3mm first layer height for copy and mirror mode prints." TYPE="warning"
	{% elif svv.idex_zoffset >= 0.1 and svv.idex_zoffset < 0.2 %}
		CONSOLE_ECHO TITLE={'"Bad toolhead z-offset of %.6fmm!"' % svv.idex_zoffset} MSG="Your toolhead z-offset is bad._N_Copy and mirror mode prints are not recommended with it." TYPE="warning"
	{% elif svv.idex_zoffset >= 0.2 %}
		CONSOLE_ECHO TITLE={'"Unacceptable toolhead z-offset of %.6fmm!"' % svv.idex_zoffset} MSG="Your toolhead z-offset is unacceptable._N_Do not print in copy and mirror mode with it." TYPE="alert"
	{% endif %}
	RATOS_ECHO PREFIX="VAOC" MSG="Toolhead z-offset calibration done!"


#####
# VAOC NOZZLE TEMPERATURE OFFSET CALIBRATION
#####
[gcode_macro _VAOC_CALIBRATE_TEMP_OFFSET]
gcode:
	# vaoc config
	{% set is_fixed = true if printer["gcode_macro _VAOC"].is_fixed|default(true)|lower == 'true' else false %}
	{% set is_started = true if printer["gcode_macro _VAOC"].is_started|default(false)|lower == 'true' else false %}

	# beacon contact config
	{% set beacon_contact_z_calibration = true if printer["gcode_macro RatOS"].beacon_contact_z_calibration|default(false)|lower == 'true' else false %}

	{% if is_fixed and is_started and printer["z_offset_probe"] is defined and printer.configfile.settings.beacon is defined and beacon_contact_z_calibration %}

		# config
		{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
		{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}

		# vaoc config
		{% set expected_camera_x_position = printer["gcode_macro _VAOC"].expected_camera_x_position|default(0)|float %}
		{% set expected_camera_y_position = printer["gcode_macro _VAOC"].expected_camera_y_position|default(0)|float %}

		# ratos variables file
		{% set svv = printer.save_variables.variables %}

		# get reference point coordinates
		{% set idex_xcontrolpoint = svv.idex_xcontrolpoint|default(0)|float %}
		{% set idex_ycontrolpoint = svv.idex_ycontrolpoint|default(0)|float %}
		{% set idex_zcontrolpoint = svv.idex_zcontrolpoint|default(50)|float %}
		{% set idex_zoffsetcontrolpoint = svv.idex_zoffsetcontrolpoint|default(0)|float %}

		# echo
		DEBUG_ECHO PREFIX="_VAOC_CALIBRATE_TEMP_OFFSET" MSG={'"xcontrolpoint %.6f, ycontrolpoint %.6f, zcontrolpoint %.6f, zoffsetcontrolpoint %.6f, expected_camera_x_position %.6f, expected_camera_y_position %.6f"' % (idex_xcontrolpoint, idex_ycontrolpoint, idex_zcontrolpoint, idex_zoffsetcontrolpoint, expected_camera_x_position, expected_camera_y_position)}

		# vaoc sanity check
		{% if (idex_xcontrolpoint - expected_camera_x_position)|abs > 5 %}
			{ action_raise_error("Unexpected VAOC x-control point detected! Please run '_VAOC_RESET' to roll back to default values.") }
		{% endif %}
		{% if (idex_ycontrolpoint - expected_camera_y_position)|abs > 5 %}
			{ action_raise_error("Unexpected VAOC y-control point detected! Please run '_VAOC_RESET' to roll back to default values.") }
		{% endif %}

		# make sure filaments are not loaded
		{% if printer["filament_switch_sensor toolhead_filament_sensor_t0"] is defined %}
			{% if printer["filament_switch_sensor toolhead_filament_sensor_t0"].filament_detected|lower == "true" %}
				_LED_START_PRINTING_ERROR
				{ action_raise_error("Filament detected in toolhead T0. Unload filament and make sure to clean the nozzle and the melting zone.") }
			{% endif %}
		{% endif %}
		{% if printer["filament_switch_sensor toolhead_filament_sensor_t1"] is defined %}
			{% if printer["filament_switch_sensor toolhead_filament_sensor_t1"].filament_detected|lower == "true" %}
				_LED_START_PRINTING_ERROR
				{ action_raise_error("Filament detected in toolhead T1. Unload filament and make sure to clean the nozzle and the melting zone.") }
			{% endif %}
		{% endif %}

		# automated toolhead z-offset calibration
		{% set act_z = printer.toolhead.position.z|float %}
		_VAOC_LOAD_TOOL T={default_toolhead}
		_VAOC_CALIBRATE_NOZZLE_TEMP_OFFSET
		_VAOC_LOAD_TOOL T={0 if default_toolhead == 1 else 1}
		_VAOC_CALIBRATE_NOZZLE_TEMP_OFFSET 
		_VAOC_LOAD_TOOL T={default_toolhead}
		G1 Z{act_z} F{z_speed}

		# echo results
		_VAOC_ECHO_NOZZLE_TEMP_OFFSETS

	{% endif %}


[gcode_macro _VAOC_CALIBRATE_NOZZLE_TEMP_OFFSET]
variable_reference_z: 0.0   # internal use only. Do not touch!
gcode:
	# config
	{% set z_offset_probe_x_offset = printer["z_offset_probe"].x_offset|default(0)|float %}
	{% set z_offset_probe_y_offset = printer["z_offset_probe"].y_offset|default(0)|float %}
	{% set speed = printer["gcode_macro RatOS"].toolchange_travel_speed * 60 %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}

	# get IDEX mode
	{% set idex_mode = printer["dual_carriage"].carriage_1|lower %}
	{% set toolhead = 1 if idex_mode=='primary' else 0 %}

	# ratos variables file
	{% set svv = printer.save_variables.variables %}

	# get reference point coordinates
	{% set idex_xcontrolpoint = svv.idex_xcontrolpoint|default(150)|float %}
	{% set idex_ycontrolpoint = svv.idex_ycontrolpoint|default(30)|float %}
	{% set idex_zcontrolpoint = svv.idex_zcontrolpoint|default(50)|float %}

	# move to control point
	G1 Z{idex_zcontrolpoint} F{z_speed}
	G1 X{idex_xcontrolpoint + z_offset_probe_x_offset} Y{idex_ycontrolpoint + z_offset_probe_y_offset} F{speed}

	# get and set start temperature offset 
	_VAOC_PROBE_NOZZLE_TEMP_OFFSET TEMP=150
	_VAOC_STORE_NOZZLE_TEMP_OFFSET TEMP=150

	# get and set end temperature offset
	_VAOC_PROBE_NOZZLE_TEMP_OFFSET TEMP=250
	_VAOC_STORE_NOZZLE_TEMP_OFFSET TEMP=250

	# get and set start temperature offset 
	_VAOC_PROBE_NOZZLE_TEMP_OFFSET TEMP=150
	_VAOC_STORE_NOZZLE_TEMP_OFFSET TEMP=150

	# get and set end temperature offset
	_VAOC_PROBE_NOZZLE_TEMP_OFFSET TEMP=250
	_VAOC_STORE_NOZZLE_TEMP_OFFSET TEMP=250

	# turn heater off
	SET_HEATER_TEMPERATURE HEATER={"extruder" if toolhead == 0 else "extruder1"} TARGET=0

	# move back to control point
	G1 X{idex_xcontrolpoint} Y{idex_ycontrolpoint} F{speed}


[gcode_macro _VAOC_PROBE_NOZZLE_TEMP_OFFSET]
gcode:
	# parameters
	{% set temp = params.TEMP|int %}

	# config
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}

	# get IDEX mode
	{% set idex_mode = printer["dual_carriage"].carriage_1|lower %}
	{% set toolhead = 1 if idex_mode=='primary' else 0 %}

	# ratos variables file
	{% set svv = printer.save_variables.variables %}

	# get reference point coordinates
	{% set idex_zcontrolpoint = svv.idex_zcontrolpoint|default(150)|float %}

	# wait for noozle to reach the probing temperature
	RATOS_ECHO PREFIX="VAOC" MSG="Waiting for nozzle to reach {temp}°C..."
	SET_HEATER_TEMPERATURE HEATER={"extruder" if toolhead == 0 else "extruder1"} TARGET={temp}
	TEMPERATURE_WAIT SENSOR={"extruder" if toolhead == 0 else "extruder1"} MINIMUM={temp} MAXIMUM={temp + 2}

	# wait for temperature to settle down
	RATOS_ECHO PREFIX="VAOC" MSG="Waiting for thermal expansion..."
	G4 P60000

	# probe
	RATOS_ECHO PREFIX="VAOC" MSG="Probing with nozzle temperature {temp}°C..."
	_VAOC_Z_OFFSET_PROBE_CURRENT_POSITION

	# move back to z-control point
	G0 Z{idex_zcontrolpoint} F{z_speed}


[gcode_macro _VAOC_STORE_NOZZLE_TEMP_OFFSET]
gcode:
	# parameters
	{% set temp = params.TEMP|int %}

	# get IDEX mode
	{% set idex_mode = printer["dual_carriage"].carriage_1|lower %}
	{% set toolhead = 1 if idex_mode=='primary' else 0 %}

	# ratos variables file
	{% set svv = printer.save_variables.variables %}

	# get last probe result
	{% set last_z = printer["z_offset_probe"].last_z_result|default(0)|float %}

	# set temperature offset
	{% if temp == 150 %}
		SET_GCODE_VARIABLE MACRO=_VAOC_CALIBRATE_NOZZLE_TEMP_OFFSET VARIABLE=reference_z VALUE={last_z}
	{% else %}
		{% set reference_z = printer["gcode_macro _VAOC_CALIBRATE_NOZZLE_TEMP_OFFSET"].reference_z|default(0)|float %}
		SAVE_VARIABLE VARIABLE=nozzle_expansion_coefficient_t{toolhead} VALUE={(last_z - reference_z)}
	{% endif %}


[gcode_macro _VAOC_ECHO_NOZZLE_TEMP_OFFSETS]
gcode:
	# ratos variables file
	{% set svv = printer.save_variables.variables %}

	# console echo
	{% set line_1 = '"T0 expansion coefficient %.6fmm"' % svv.nozzle_expansion_coefficient_t0 %}
	{% set line_2 = '"T1 expansion coefficient %.6fmm"' % svv.nozzle_expansion_coefficient_t1 %}
	CONSOLE_ECHO TITLE="Nozzle expansion coefficients:" MSG={'"%s_N_%s"' % (line_1, line_2)} TYPE="result"


#####
# VAOC UTILS
#####
[gcode_macro _VAOC_RESET]
gcode:
	# config
	{% set expected_camera_x_position = printer["gcode_macro _VAOC"].expected_camera_x_position|default(0)|float %}
	{% set expected_camera_y_position = printer["gcode_macro _VAOC"].expected_camera_y_position|default(0)|float %}

	# ratos variables file
	{% set svv = printer.save_variables.variables %}

	# reset VAOC variables 
	SAVE_VARIABLE VARIABLE=idex_xcontrolpoint VALUE={expected_camera_x_position}
	SAVE_VARIABLE VARIABLE=idex_ycontrolpoint VALUE={expected_camera_y_position}
	SAVE_VARIABLE VARIABLE=idex_zcontrolpoint VALUE=5.0
	SAVE_VARIABLE VARIABLE=idex_zoffsetcontrolpoint VALUE=0.0
	SAVE_VARIABLE VARIABLE=idex_xoffset VALUE=0.0
	SAVE_VARIABLE VARIABLE=idex_yoffset VALUE=0.0
	SAVE_VARIABLE VARIABLE=idex_zoffset VALUE=0.0

	# echo
	RATOS_ECHO PREFIX="VAOC" MSG="VAOC configuration resetted. Please calibrate it before using the printer."


[gcode_macro _ECHO_VAOC_VARS]
description: Echo VAOC variables to the console.
gcode:
	{% for var, value in printer["gcode_macro _VAOC"].items() %}
		{action_respond_info(var ~ ": " ~ value)}
	{% endfor %}


[gcode_macro _VAOC_SWITCH_LED]
gcode:
	{% if params.STATE|default(0)|int == 1 %}
		_LED_VAOC_ON
	{% else %}  
		_LED_VAOC_OFF
	{% endif %}
